{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","query","setQuery","loading","setLoading","isError","setIsError","setMovie","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","result","newMovie","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","trim","onClick","App","setMovies","isMovieInList","forEach","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e392067.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n};\n\nconst defaultImg = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setIsError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setLoading(true);\n\n    if (query) {\n      getMovie(query)\n        .then(result => {\n          if ('Error' in result) {\n            setMovie(null);\n            setIsError(true);\n          } else {\n            const newMovie = {\n              title: result.Title,\n              description: result.Plot,\n              imgUrl: result.Poster,\n              imdbUrl: `https://www.imdb.com/title/${result.imdbID}`,\n              imdbId: result.imdbID,\n            };\n\n            if (result.Poster === 'N/A') {\n              newMovie.imgUrl = defaultImg;\n            }\n\n            setMovie(newMovie);\n            setIsError(false);\n          }\n        })\n        .finally(() => setLoading(false));\n    }\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      addMovie(movie);\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': loading,\n                },\n              )}\n              disabled={!query.trim()}\n            >\n              {!movie ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=2c0a0da9';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    let isMovieInList = false;\n\n    movies.forEach(item => {\n      if (item.imdbId === movie.imdbId) {\n        isMovieInList = true;\n      }\n    });\n\n    if (!isMovieInList) {\n      setMovies([\n        ...movies,\n        movie,\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}